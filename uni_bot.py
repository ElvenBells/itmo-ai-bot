import telebot
import camelot
import pandas as pd

# === –¢–û–ö–ï–ù –ë–û–¢–ê ===
TOKEN = "8496042891:AAFXF6FyVIgY-VAYr84dB0pKOqlu3RuD3tM"
bot = telebot.TeleBot(TOKEN)

# === –ü–£–¢–ò –ö PDF-–§–ê–ô–õ–ê–ú ===
PDF_AI = "ai_abit.pdf"
PDF_AI_PRODUCT = "ai_product_abit.pdf"

# === –°–æ—Å—Ç–æ—è–Ω–∏—è –±–æ—Ç–∞ ===
user_state = {}  # {chat_id: {stage: ..., program: ...}}
user_background = {}  # {chat_id: —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–∞–º–∏}

# === –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã ===
def get_main_menu():
    keyboard = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add("–°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã")
    keyboard.add("–ü–æ–∫–∞–∑–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω")
    keyboard.add("–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤")
    keyboard.add("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ ¬´–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç¬ª", "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ ¬´AI Product¬ª")
    return keyboard

# === –ü–∞—Ä—Å–∏–Ω–≥ PDF ===
def parse_curriculum(pdf_path):
    try:
        tables = camelot.read_pdf(pdf_path, flavor='lattice', pages='all')
        curriculum = []
        for table in tables:
            df: pd.DataFrame = table.df
            if df.shape[1] < 4:
                continue
            for _, row in df.iterrows():
                try:
                    semester = row[0].strip()
                    name = row[1].strip()
                    credits = row[2].strip()
                    hours = row[3].strip()
                    if semester.isdigit() and int(semester) in [1, 2, 3, 4]:
                        curriculum.append({
                            'semester': int(semester),
                            'name': name,
                            'credits': credits,
                            'hours': hours
                        })
                except:
                    continue
        return pd.DataFrame(curriculum)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ {pdf_path}: {e}")
        return pd.DataFrame()

# === –ó–∞–≥—Ä—É–∑–∫–∞ —É—á–µ–±–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ ===
df_ai = parse_curriculum(PDF_AI)
df_ai_product = parse_curriculum(PDF_AI_PRODUCT)

print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫—É—Ä—Å–æ–≤ –¥–ª—è '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç': {len(df_ai)}")
print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫—É—Ä—Å–æ–≤ –¥–ª—è 'AI Product': {len(df_ai_product)}")

# === –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–∞–º–º ===
def start_program_questionnaire(chat_id):
    kb = telebot.types.ReplyKeyboardRemove()
    bot.send_message(
        chat_id,
        "üéì –î–∞–≤–∞–π –ø—Ä–æ–π–¥—ë–º –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –ª—É—á—à—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É.\n\n"
        "1Ô∏è‚É£ –ö–∞–∫–æ–µ —É —Ç–µ–±—è –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –±–∞–∫–∞–ª–∞–≤—Ä –ø–æ IT, –º–∞–≥–∏—Å—Ç—Ä —ç–∫–æ–Ω–æ–º–∏–∫–∏, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥—É.",
        reply_markup=kb
    )
    user_state[chat_id] = {'stage': 'education'}

# === –ù–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –ø–æ –∫—É—Ä—Å–∞–º ===
def start_course_questionnaire(chat_id):
    kb = telebot.types.ReplyKeyboardRemove()
    bot.send_message(
        chat_id,
        "üéØ –û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π –ø–æ–¥–±–µ—Ä—ë–º —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –∫—É—Ä—Å—ã.\n\n"
        "1Ô∏è‚É£ –ö–∞–∫–∏–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ç–µ–±–µ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã?\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä: –º–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ, NLP, Computer Vision, –ø—Ä–æ–¥—É–∫—Ç, UX, —Å—Ç–∞—Ä—Ç–∞–ø—ã.",
        reply_markup=kb
    )
    user_state[chat_id] = {'stage': 'course_interests'}

# === –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ===
@bot.message_handler(commands=['start'])
def start(message):
    chat_id = message.chat.id
    user_state[chat_id] = {'stage': 'menu'}
    bot.send_message(
        chat_id,
        "üéì –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫ –ø–æ –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏–º –ø—Ä–æ–≥—Ä–∞–º–º–∞–º –ò–¢–ú–û –≤ –æ–±–ª–∞—Å—Ç–∏ AI.\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –≤—ã–±—Ä–∞—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—É, –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω –∏ –ø–æ–¥–æ–±—Ä–∞—Ç—å –∫—É—Ä—Å—ã.\n\n"
        "–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç:",
        reply_markup=get_main_menu()
    )

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    chat_id = message.chat.id
    text = message.text.strip().lower()
    state = user_state.get(chat_id, {}).get('stage', 'menu')

    # --- –°—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã ‚Üí —à–∏—Ä–æ–∫–∏–π –æ–ø—Ä–æ—Å ---
    if text == "—Å—Ä–∞–≤–Ω–∏—Ç—å –ø—Ä–æ–≥—Ä–∞–º–º—ã":
        start_program_questionnaire(chat_id)

    # --- –≠—Ç–∞–ø—ã –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã ---
    elif state == 'education':
        user_background[chat_id] = {'education': text}
        bot.send_message(chat_id, "2Ô∏è‚É£ –ö–∞–∫–æ–π —É —Ç–µ–±—è –æ–ø—ã—Ç —Ä–∞–±–æ—Ç—ã (–µ—Å–ª–∏ –µ—Å—Ç—å)?")
        user_state[chat_id]['stage'] = 'experience'

    elif state == 'experience':
        user_background[chat_id]['experience'] = text
        bot.send_message(chat_id, "3Ô∏è‚É£ –ß—Ç–æ —Ç–µ–±–µ –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –Ω—Ä–∞–≤–∏–ª–æ—Å—å –≤ —É—á—ë–±–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ?")
        user_state[chat_id]['stage'] = 'interests'

    elif state == 'interests':
        user_background[chat_id]['interests'] = text
        bot.send_message(chat_id, "4Ô∏è‚É£ –ö–∞–∫–∏–µ —É —Ç–µ–±—è —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã?")
        user_state[chat_id]['stage'] = 'strengths'

    elif state == 'strengths':
        user_background[chat_id]['strengths'] = text
        bot.send_message(chat_id, "5Ô∏è‚É£ –ö–∞–∫–∏–µ —É —Ç–µ–±—è —Ü–µ–ª–∏ –ø–æ—Å–ª–µ –º–∞–≥–∏—Å—Ç—Ä–∞—Ç—É—Ä—ã?")
        user_state[chat_id]['stage'] = 'goals'

    elif state == 'goals':
        user_background[chat_id]['goals'] = text
        all_text = " ".join(user_background[chat_id].values())

        ai_score = sum(1 for kw in [
            'ml', 'machine learning', 'python', '–ø—Ä–æ–≥—Ä–∞–º–º–∏—Ä–æ–≤–∞–Ω–∏–µ', 'data', '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞',
            '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞', '–∏–Ω–∂–µ–Ω–µ—Ä', '–Ω–∞—É–∫–∞', 'research', '–∞–ª–≥–æ—Ä–∏—Ç–º—ã', '—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞', 'deep learning'
        ] if kw in all_text)

        product_score = sum(1 for kw in [
            '–ø—Ä–æ–¥—É–∫—Ç', 'product', '–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç', '–±–∏–∑–Ω–µ—Å', '—Å—Ç–∞—Ä—Ç–∞–ø', '–º–∞—Ä–∫–µ—Ç–∏–Ω–≥',
            '—É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ', '–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏', '–ª–∏–¥–µ—Ä—Å—Ç–≤–æ', 'MVP', 'UX', 'UI', '–ø—Ä–æ–µ–∫—Ç'
        ] if kw in all_text)

        if '–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞' in all_text or '–∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–∫–∞' in all_text:
            ai_score += 1
        if '—Å—Ç–∞—Ä—Ç–∞–ø' in all_text or '–ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–æ' in all_text:
            product_score += 1
        if '–Ω–∞—É—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞' in all_text:
            ai_score += 1
        if '–∫–æ–º–∞–Ω–¥–∞' in all_text or '–ª–∏–¥–µ—Ä—Å—Ç–≤–æ' in all_text:
            product_score += 1

        if ai_score > product_score:
            rec = "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: ¬´–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç¬ª</b>\n\n–¢—ã —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –∏–ª–∏ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å."
        elif product_score > ai_score:
            rec = "‚úÖ <b>–†–µ–∫–æ–º–µ–Ω–¥—É–µ–º: ¬´AI Product¬ª</b>\n\n–¢—ã —Å–∫–ª–æ–Ω–µ–Ω –∫ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–º—É –º—ã—à–ª–µ–Ω–∏—é –∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—é."
        else:
            rec = "üí° <b>–û–±–µ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Ç–µ–±–µ –ø–æ–¥—Ö–æ–¥—è—Ç!</b>\n\n–†–∞—Å—Å–º–æ—Ç—Ä–∏ —É—á–µ–±–Ω—ã–µ –ø–ª–∞–Ω—ã –∏ –≤—ã–±–µ—Ä–∏ –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º."

        bot.send_message(chat_id, rec, parse_mode='HTML')
        bot.send_message(
            chat_id,
            'üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ:\n‚Ä¢ <a href="https://abit.itmo.ru/program/master/ai">–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç</a>\n‚Ä¢ <a href="https://abit.itmo.ru/program/master/ai_product">AI Product</a>',
            parse_mode='HTML',
            reply_markup=get_main_menu()
        )
        user_state[chat_id] = {'stage': 'menu'}

    # --- –ü–æ–∫–∞–∑–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω ---
    elif text == "–ø–æ–∫–∞–∑–∞—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω":
        kb = telebot.types.ReplyKeyboardMarkup(resize_keyboard=True)
        kb.add("–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç", "AI Product")
        kb.add("–ù–∞–∑–∞–¥")
        bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏ –ø—Ä–æ–≥—Ä–∞–º–º—É:", reply_markup=kb)

    # --- –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ---
    elif text == "–Ω–∞–∑–∞–¥":
        user_state[chat_id] = {'stage': 'menu'}
        bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_main_menu())

    # --- –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω AI ---
    elif text == "–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç":
        if df_ai.empty:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω.")
        else:
            semesters = df_ai.groupby('semester')
            for sem, group in semesters:
                top_5 = group.head(5)
                courses = "\n".join([f"‚Ä¢ {row['name']} ({row['credits']} –∑.–µ.)" for _, row in top_5.iterrows()])
                bot.send_message(
                    chat_id,
                    f"üìö <b>–°–µ–º–µ—Å—Ç—Ä {sem} (–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç)</b>:\n\n{courses}",
                    parse_mode='HTML'
                )
        bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_main_menu())

    # --- –ü–æ–∫–∞–∑–∞—Ç—å –ø–ª–∞–Ω AI Product ---
    elif text == "ai product":
        if df_ai_product.empty:
            bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É—á–µ–±–Ω—ã–π –ø–ª–∞–Ω.")
        else:
            semesters = df_ai_product.groupby('semester')
            for sem, group in semesters:
                top_5 = group.head(5)
                courses = "\n".join([f"‚Ä¢ {row['name']} ({row['credits']} –∑.–µ.)" for _, row in top_5.iterrows()])
                bot.send_message(
                    chat_id,
                    f"üìö <b>–°–µ–º–µ—Å—Ç—Ä {sem} (AI Product)</b>:\n\n{courses}",
                    parse_mode='HTML'
                )
        bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_main_menu())

    # --- –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤ ‚Üí —É–∑–∫–∏–π –æ–ø—Ä–æ—Å ---
    elif text == "—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –≤—ã–±–æ—Ä—É –∫—É—Ä—Å–æ–≤":
        start_course_questionnaire(chat_id)

    # --- –≠—Ç–∞–ø—ã —É–∑–∫–æ–≥–æ –æ–ø—Ä–æ—Å–Ω–∏–∫–∞ –ø–æ –∫—É—Ä—Å–∞–º ---
    elif state == 'course_interests':
        user_background[chat_id] = {'interests': text}
        bot.send_message(
            chat_id,
            "2Ô∏è‚É£ –ï—Å—Ç—å –ª–∏ —Ç–µ–º—ã, –≤ –∫–æ—Ç–æ—Ä—ã—Ö —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–±—è —Å–ª–∞–±–æ?\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: –º–∞—Ç–µ–º–∞—Ç–∏–∫–∞, Python, —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞, –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç."
        )
        user_state[chat_id]['stage'] = 'course_weaknesses'

    elif state == 'course_weaknesses':
        user_background[chat_id]['weaknesses'] = text
        bot.send_message(
            chat_id,
            "3Ô∏è‚É£ –ö–∞–∫–∏–µ –∫–∞—Ä—å–µ—Ä–Ω—ã–µ —Ü–µ–ª–∏?\n"
            "–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç–∞—Ç—å ML Engineer, –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—Ç–∞–ø, —Ä–∞–±–æ—Ç–∞—Ç—å –≤ AI Product."
        )
        user_state[chat_id]['stage'] = 'course_goals'

    elif state == 'course_goals':
        user_background[chat_id]['goals'] = text
        bot.send_message(
            chat_id,
            "4Ô∏è‚É£ –ü—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ—à—å –ø—Ä–∞–∫—Ç–∏–∫—É, —Ç–µ–æ—Ä–∏—é –∏–ª–∏ –ø—Ä–æ–µ–∫—Ç—ã?"
        )
        user_state[chat_id]['stage'] = 'course_format'

    elif state == 'course_format':
        user_background[chat_id]['format'] = text
        all_text = " ".join(user_background[chat_id].values())
        recs = []

        # –ö—É—Ä—Å—ã –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º
        ai_courses = df_ai[df_ai['name'].str.contains(
            '–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ|–ì–ª—É–±–æ–∫–æ–µ –æ–±—É—á–µ–Ω–∏–µ|Python|ML|NLP|Computer Vision|–º–∞—Ç–µ–º–∞—Ç–∏–∫–∞|—Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞|Data Science', case=False)]
        product_courses = df_ai_product[df_ai_product['name'].str.contains(
            '–ü—Ä–æ–¥—É–∫—Ç|–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç|–º–∞—Ä–∫–µ—Ç–∏–Ω–≥|–±–∏–∑–Ω–µ—Å|—Å—Ç–∞—Ä—Ç–∞–ø|MVP|–∏–Ω–Ω–æ–≤–∞—Ü–∏–∏|UX|UI|–∞–Ω–∞–ª–∏—Ç–∏–∫–∞', case=False)]

        # –ò–Ω—Ç–µ—Ä–µ—Å—ã
        if 'ml' in all_text or 'machine learning' in all_text:
            top_ai = ai_courses[ai_courses['name'].str.contains('–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ', case=False)]
            if not top_ai.empty:
                recs.append("üéØ <b>–û—Å–Ω–æ–≤–Ω–æ–π –∫—É—Ä—Å:</b> " + top_ai.iloc[0]['name'])
        if 'nlp' in all_text:
            nlp = ai_courses[ai_courses['name'].str.contains('NLP', case=False)]
            if not nlp.empty:
                recs.append("üí¨ <b>–ö—É—Ä—Å –ø–æ NLP:</b> " + nlp.iloc[0]['name'])
        if 'computer vision' in all_text:
            cv = ai_courses[ai_courses['name'].str.contains('Computer Vision', case=False)]
            if not cv.empty:
                recs.append("üëÅÔ∏è <b>–ö—É—Ä—Å –ø–æ Computer Vision:</b> " + cv.iloc[0]['name'])

        # –°–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        if '–º–∞—Ç–µ–º–∞—Ç–∏–∫' in all_text:
            math = df_ai[df_ai['name'].str.contains('–ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ –¥–ª—è ML', case=False)]
            if not math.empty:
                recs.append("üßÆ <b>–£–∫—Ä–µ–ø–∏ –±–∞–∑—É:</b> " + math.iloc[0]['name'])
        if 'python' in all_text and '—Å–ª–∞–±' in all_text:
            py = df_ai[df_ai['name'].str.contains('Python', case=False)]
            if not py.empty:
                recs.append("üíª <b>Python –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö:</b> " + py.iloc[0]['name'])

        # –¶–µ–ª–∏
        if '—Å—Ç–∞—Ä—Ç–∞–ø' in all_text:
            startup = df_ai_product[df_ai_product['name'].str.contains('–°—Ç–∞—Ä—Ç–∞–ø-—Ç—Ä–µ–∫', case=False)]
            if not startup.empty:
                recs.append("üöÄ <b>–î–∏–ø–ª–æ–º–Ω—ã–π —Ç—Ä–µ–∫:</b> " + startup.iloc[0]['name'])

        # –§–æ—Ä–º–∞—Ç
        if '–ø—Ä–∞–∫—Ç–∏–∫–∞' in all_text or '–ø—Ä–æ–µ–∫—Ç' in all_text:
            project = df_ai[df_ai['name'].str.contains('–ü—Ä–æ–µ–∫—Ç', case=False)].head(1)
            if not project.empty:
                recs.append("üîß <b>–ü—Ä–æ–µ–∫—Ç–Ω—ã–π –∫—É—Ä—Å:</b> " + project.iloc[0]['name'])

        if not recs:
            recs.append("üìå –°–æ–≤–µ—Ç: –Ω–∞—á–Ω–∏ —Å '–í–æ—Ä–∫—à–æ–ø –ø–æ —Å–æ–∑–¥–∞–Ω–∏—é –ø—Ä–æ–¥—É–∫—Ç–∞ –Ω–∞ –¥–∞–Ω–Ω—ã—Ö' ‚Äî –æ–Ω –µ—Å—Ç—å –≤ –æ–±–µ–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º–∞—Ö.")

        bot.send_message(chat_id, "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∫—É—Ä—Å–∞–º:\n\n" + "\n".join(recs), parse_mode='HTML')
        bot.send_message(chat_id, "–ß—Ç–æ –¥–∞–ª—å—à–µ?", reply_markup=get_main_menu())
        user_state[chat_id] = {'stage': 'menu'}

    # --- –û –ø—Ä–æ–≥—Ä–∞–º–º–µ ¬´–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç¬ª ---
    elif "–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ" in text and ("–∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" in text or "ai" in text and "–∏–Ω—Ç–µ–ª–ª–µ–∫—Ç" in text):
        msg = (
            "üîπ <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞: –ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç</b>\n\n"
            "–°–æ–∑–¥–∞–≤–∞–π—Ç–µ AI-–ø—Ä–æ–¥—É–∫—Ç—ã –∏ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–µ–Ω—è—é—Ç –º–∏—Ä.\n"
            "–ü—Ä–æ–µ–∫—Ç–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Å –∫–æ–º–ø–∞–Ω–∏—è–º–∏: X5 Group, Ozon –ë–∞–Ω–∫, –ú–¢–°, Sber AI, –ù–æ—Ä–Ω–∏–∫–µ–ª—å, Napoleon IT, Genotek, Raft, AIRI, DeepPavlov.\n\n"
            "<b>üéØ –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–æ–ª–∏:</b>\n"
            "‚Ä¢ ML Engineer ‚Äî —Å–æ–∑–¥–∞–µ—Ç –∏ –≤–Ω–µ–¥—Ä—è–µ—Ç ML-–º–æ–¥–µ–ª–∏ –≤ –ø—Ä–æ–¥–∞–∫—à–µ–Ω\n"
            "‚Ä¢ Data Engineer ‚Äî –≤—ã—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å—ã —Å–±–æ—Ä–∞, —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ AI Product Developer ‚Äî —Ä–∞–∑—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ AI\n"
            "‚Ä¢ Data Analyst ‚Äî –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –º–∞—Å—Å–∏–≤—ã –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–º–æ–≥–∞–µ—Ç –±–∏–∑–Ω–µ—Å—É –ø—Ä–∏–Ω–∏–º–∞—Ç—å data-driven —Ä–µ—à–µ–Ω–∏—è\n\n"
            "<b>üíº –ö–∞—Ä—å–µ—Ä–Ω—ã–π —É—Ä–æ–≤–µ–Ω—å:</b> Middle\n"
            "<b>üìà –ó–∞—Ä–ø–ª–∞—Ç–∞:</b> –æ—Ç 170 000 –¥–æ 300 000 ‚ÇΩ\n\n"
            "<b>üéì –í—ã–ø—É—Å–∫–Ω–∞—è —Ä–∞–±–æ—Ç–∞:</b> –ø—Ä–æ–µ–∫—Ç, —Å—Ç–∞—Ç—å—è, —Å—Ç–∞—Ä—Ç–∞–ø, –∫—É—Ä—Å –∏–ª–∏ –æ–±—Ä–∞–∑–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏—è\n\n"
            "<b>üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ –∫–æ–Ω—Ñ–µ—Ä–µ–Ω—Ü–∏—è—Ö A*\n"
            "‚Ä¢ –ù–∞—É—á–Ω—ã–µ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏ –∑–∞ —Ä—É–±–µ–∂–æ–º\n"
            "‚Ä¢ Study Abroad at Home\n"
            "‚Ä¢ Buddy System\n"
            "‚Ä¢ –ö–æ–Ω–∫—É—Ä—Å —Å—Ç–∏–ø–µ–Ω–¥–∏–π –ü—Ä–µ–∑–∏–¥–µ–Ω—Ç–∞ –†–§ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –∑–∞ —Ä—É–±–µ–∂–æ–º\n\n"
            "<b>üìö –§–æ—Ä–º–∞—Ç:</b> –≤–µ—á–µ—Ä–Ω–∏–π –æ–Ω–ª–∞–π–Ω ‚Äî –º–æ–∂–Ω–æ —Å–æ–≤–º–µ—â–∞—Ç—å —Å —Ä–∞–±–æ—Ç–æ–π\n\n"
            '<a href="https://abit.itmo.ru/program/master/ai">üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ</a>'
        )
        bot.send_message(chat_id, msg, parse_mode='HTML', disable_web_page_preview=True)

    # --- –û –ø—Ä–æ–≥—Ä–∞–º–º–µ ¬´AI Product¬ª ---
    elif "–æ –ø—Ä–æ–≥—Ä–∞–º–º–µ" in text and ("ai product" in text or "–∞–π –ø—Ä–æ–¥—É–∫—Ç" in text or "ai –ø—Ä–æ–¥—É–∫—Ç" in text):
        msg = (
            "üîπ <b>–ü—Ä–æ–≥—Ä–∞–º–º–∞: AI Product</b>\n\n"
            "–§–æ–∫—É—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–∏ AI-–ø—Ä–æ–¥—É–∫—Ç–æ–≤, —É–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏ –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—å—Å—Ç–≤–µ.\n"
            "–†–∞–±–æ—Ç–∞ —Å –ø–∞—Ä—Ç–Ω—ë—Ä–∞–º–∏: Sber AI, Ozon, X5, Napoleon IT.\n\n"
            "<b>üéØ –í–æ–∑–º–æ–∂–Ω—ã–µ —Ä–æ–ª–∏:</b>\n"
            "‚Ä¢ AI Product Manager\n"
            "‚Ä¢ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –º–µ–Ω–µ–¥–∂–µ—Ä\n\n"
            "<b>üöÄ –î–∏–ø–ª–æ–º:</b> –º–æ–∂–Ω–æ –∑–∞—â–∏—Ç–∏—Ç—å —Å—Ç–∞—Ä—Ç–∞–ø\n\n"
            "<b>ü§ù –ü–∞—Ä—Ç–Ω—ë—Ä—ã:</b> Sber AI, Ozon, X5, Napoleon IT\n\n"
            "<b>üåç –ú–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –£—á–∞—Å—Ç–∏–µ –≤ —à–∫–æ–ª–∞—Ö –∏ —á–µ–º–ø–∏–æ–Ω–∞—Ç–∞—Ö\n"
            "‚Ä¢ Study Abroad at Home\n"
            "‚Ä¢ Buddy System\n"
            "‚Ä¢ –ö–æ–Ω–∫—É—Ä—Å—ã –∏ —Å—Ç–∞–∂–∏—Ä–æ–≤–∫–∏\n\n"
            "<b>üí° –û—Å–æ–±–µ–Ω–Ω–æ—Å—Ç—å:</b> —Ä–∞–∑–≤–∏–≤–∞–π –∏–¥–µ—é –ø—Ä–æ–¥—É–∫—Ç–∞ –∏ –≤—ã–≤–æ–¥–∏ –µ—ë –Ω–∞ —Ä—ã–Ω–æ–∫\n\n"
            '<a href="https://abit.itmo.ru/program/master/ai_product">üîó –ü–æ–¥—Ä–æ–±–Ω–µ–µ –Ω–∞ —Å–∞–π—Ç–µ</a>'
        )
        bot.send_message(chat_id, msg, parse_mode='HTML', disable_web_page_preview=True)

    # --- –ù–µ—Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã ---
    else:
        bot.send_message(
            chat_id,
            "–Ø –ø–æ–º–æ–≥–∞—é –ø–æ –≤–æ–ø—Ä–æ—Å–∞–º –º–∞–≥–∏—Å—Ç–µ—Ä—Å–∫–∏—Ö –ø—Ä–æ–≥—Ä–∞–º–º –ò–¢–ú–û –ø–æ AI.\n"
            "–í—ã–±–µ—Ä–∏ —Ç–µ–º—É:",
            reply_markup=get_main_menu()
        )

# === –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ===
if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)